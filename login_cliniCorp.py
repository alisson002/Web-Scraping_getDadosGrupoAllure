from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains
import time
import sys
from datetime import date


# Vari√°vel global para armazenar o driver
driver = None

def inicializar_navegador():
    """
    Fun√ß√£o para inicializar o navegador Chrome com configura√ß√µes otimizadas
    A vari√°vel driver fica dispon√≠vel globalmente para uso em outras fun√ß√µes
    """
    global driver
    
    print("üöÄ Inicializando navegador Chrome...")
    
    # Configura√ß√µes do Chrome para otimizar a automa√ß√£o
    chrome_options = Options()
    # Remove notifica√ß√µes e popups desnecess√°rios do navegador
    chrome_options.add_argument("--disable-notifications")
    # Desativa extens√µes para melhor performance
    chrome_options.add_argument("--disable-extensions")
    # Remove barras de informa√ß√£o sobre automa√ß√£o
    chrome_options.add_argument("--disable-infobars")
    # Configura User-Agent para parecer mais com um navegador real
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    
    # Para executar em modo headless (sem interface gr√°fica), descomente a linha abaixo:
    # chrome_options.add_argument("--headless")
    
    try:
        # Inicializa o driver do Chrome com as op√ß√µes configuradas
        # O webdriver.Chrome() cria uma inst√¢ncia do navegador Chrome controlada pelo Selenium
        driver = webdriver.Chrome(options=chrome_options)
        
        # Define um tempo limite padr√£o para encontrar elementos (10 segundos)
        # Isso evita que o script trave se um elemento demorar para carregar
        driver.implicitly_wait(10)
        
        # Maximiza a janela do navegador para garantir que todos os elementos sejam vis√≠veis
        # Alguns sites t√™m comportamentos diferentes em telas menores
        driver.maximize_window()
        
        print("‚úÖ Navegador inicializado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar navegador: {type(e).__name__}: {e}")
        print("‚ö†Ô∏è Verifique se o ChromeDriver est√° instalado e configurado corretamente")
        sys.exit(1)  # Encerra o programa se n√£o conseguir inicializar o navegador


def loginCliniCorp_RU(url_login, RU_usuario, RU_senha):
    """
    Fun√ß√£o para fazer login automatizado no sistema CliniCorp
    Usa a vari√°vel global 'driver' que deve ser inicializada antes
    
    Par√¢metros:
    - url_login: string com o link da p√°gina de login
    - RU_usuario: string com o nome de usu√°rio ou email
    - RU_senha: string com a senha do usu√°rio
    
    A fun√ß√£o executa o login e deixa o navegador aberto para uso posterior
    Em caso de erro cr√≠tico, encerra o programa
    """
    global driver
    
    # Verifica se o navegador foi inicializado
    if driver is None:
        print("‚ùå Erro: Navegador n√£o foi inicializado!")
        print("üí° Chame a fun√ß√£o inicializar_navegador() antes do login")
        sys.exit(1)
    
    try:
        print(f"üåê Acessando a p√°gina de login: {url_login}")
        # Navega para a URL de login fornecida
        # O get() aguarda a p√°gina carregar completamente antes de continuar
        driver.get(url_login)
        
        # Aguarda 3 segundos para garantir que a p√°gina carregou completamente
        # Alguns elementos JavaScript podem demorar para aparecer
        time.sleep(3)
        
        # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
        # Timeout de 15 segundos para opera√ß√µes que precisam de espera
        wait = WebDriverWait(driver, 15)
        
        print("üîç Procurando pelo campo de usu√°rio...")
        # Tenta encontrar o campo de usu√°rio usando diferentes seletores poss√≠veis
        # Os sites podem usar diferentes IDs, names ou classes para os campos de login
        campo_RU_usuario = None
        seletores_RU_usuario = [
            "input[id='username']",      # Campo com id="username"
            "input[name='username']",    # Campo com name="username"
            "input[name='user']",        # Campo com name="user"
            "input[name='email']",       # Campo com name="email"
            "input[id='user']",          # Campo com id="user"
            "input[id='email']",         # Campo com id="email"
            "input[type='text']",        # Primeiro campo de texto encontrado
            "input[placeholder*='usu√°rio']",  # Campo com placeholder contendo "usu√°rio"
            "input[placeholder*='email']"     # Campo com placeholder contendo "email"
        ]
        
        # Itera pelos seletores at√© encontrar um campo v√°lido
        for seletor in seletores_RU_usuario:
            try:
                # Aguarda at√© 10 segundos pelo elemento aparecer
                campo_RU_usuario = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, seletor)))
                print(f"‚úÖ Campo de usu√°rio encontrado com seletor: {seletor}")
                break  # Sai do loop se encontrou o campo
            except TimeoutException:
                continue  # Tenta o pr√≥ximo seletor se este falhou
        
        # Verifica se conseguiu encontrar o campo de usu√°rio
        if campo_RU_usuario is None:
            print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o campo de usu√°rio")
            print("üí° Verifique se a URL est√° correta e se a p√°gina carregou completamente")
            encerrar_navegador()
            sys.exit(1)
        
        # Limpa qualquer conte√∫do existente no campo e digita o usu√°rio
        # clear() remove texto que pode estar pr√©-preenchido
        campo_RU_usuario.clear()
        # send_keys() simula a digita√ß√£o do usu√°rio
        campo_RU_usuario.send_keys(RU_usuario)
        print(f"‚úÖ Usu√°rio '{RU_usuario}' inserido no campo")
        
        print("üîç Procurando pelo campo de senha...")
        # Processo similar para encontrar o campo de senha
        campo_RU_senha = None
        seletores_RU_senha = [
            "input[id='password']",      # Campo com id="password"
            "input[name='password']",    # Campo com name="password"
            "input[name='passwd']",      # Campo com name="passwd"
            "input[name='pwd']",         # Campo com name="pwd"
            "input[id='passwd']",        # Campo com id="passwd"
            "input[id='pwd']",           # Campo com id="pwd"
            "input[type='password']",    # Campo de tipo senha
            "input[placeholder*='senha']" # Campo com placeholder contendo "senha"
        ]
        
        # Itera pelos seletores de senha
        for seletor in seletores_RU_senha:
            try:
                campo_RU_senha = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, seletor)))
                print(f"‚úÖ Campo de senha encontrado com seletor: {seletor}")
                break
            except TimeoutException:
                continue
        
        if campo_RU_senha is None:
            print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o campo de senha")
            print("üí° Verifique se a p√°gina de login est√° carregada corretamente")
            encerrar_navegador()
            sys.exit(1)
        
        # Insere a senha no campo encontrado
        campo_RU_senha.clear()
        campo_RU_senha.send_keys(RU_senha)
        print("‚úÖ Senha inserida no campo")
        
        print("üîç Procurando pelo bot√£o de login...")
        # Procura pelo bot√£o de submit/login usando v√°rios seletores poss√≠veis
        botao_login = None
        seletores_botao = [
            "button:contains('Entrar')", # Bot√£o com texto "Entrar"
            "button[type='submit']",     # Bot√£o de submit
            "input[type='submit']",      # Input de submit
            "button:contains('Login')",  # Bot√£o com texto "Login"
            "input[value='Entrar']",     # Input com valor "Entrar"
            "input[value='Login']",      # Input com valor "Login"
            ".btn-login",                # Classe CSS comum para bot√µes de login
            "#login-button",             # ID comum para bot√µes de login
            "form button",               # Qualquer bot√£o dentro de um form
            "form input[type='submit']"  # Qualquer input submit dentro de um form
        ]
        
        # Tenta encontrar o bot√£o usando cada seletor
        for seletor in seletores_botao:
            try:
                if ":contains(" in seletor:
                    # Para seletores com :contains, usa XPath que suporta texto
                    texto = seletor.split("'")[1]  # Extrai o texto do seletor
                    xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}']"
                    botao_login = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
                else:
                    # Para outros seletores, usa CSS selector normal
                    botao_login = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
                print(f"‚úÖ Bot√£o de login encontrado com seletor: {seletor}")
                break
            except TimeoutException:
                continue
        
        if botao_login is None:
            print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o bot√£o de login")
            print("üí° Verifique se o formul√°rio de login est√° vis√≠vel na p√°gina")
            encerrar_navegador()
            sys.exit(1)
        
        # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
        time.sleep(1)
        
        print("üîê Clicando no bot√£o de login...")
        # Clica no bot√£o de login para submeter o formul√°rio
        botao_login.click()
        
        # Aguarda alguns segundos para a p√°gina processar o login
        print("‚è≥ Aguardando resposta do servidor...")
        time.sleep(5)
        
        # Verifica se o login foi bem-sucedido analisando a URL atual
        url_atual = driver.current_url
        print(f"üåê URL atual ap√≥s login: {url_atual}")
        
        # Crit√©rios para determinar se o login foi bem-sucedido:
        # 1. A URL mudou da p√°gina de login
        # 2. N√£o cont√©m palavras que indicam erro
        # 3. Cont√©m indicadores de √°rea logada
        if (url_atual != url_login and 
            "login" not in url_atual.lower() and
            "erro" not in url_atual.lower() and
            "error" not in url_atual.lower()):
            
            print("üéâ Login realizado com sucesso!")
            
            # Procura por elementos que confirmam que o usu√°rio est√° logado
            try:
                # Procura por indicadores comuns de usu√°rio logado
                indicadores_logado = [
                    "//*[contains(@class, 'welcome-msg__text--2')]",    # Classe do texto de bom dia
                    "//a[contains(text(), 'Ranking de Unidades')]",     # Link da tela Ranking de Unidades
                    "//a[contains(text(), 'Bom dia!')]",                # texto de Bom dia.
                    "//a[contains(text(), 'Logout')]",                  # Link de logout
                    "//a[contains(text(), 'Sair')]",                    # Link de sair
                    "//*[contains(text(), 'Bem-vindo')]",               # Mensagem de boas-vindas
                    "//*[contains(@class, 'user-menu')]",               # Menu de usu√°rio
                    "//*[contains(@class, 'dashboard')]",               # √Årea de dashboard
                    "//*[contains(@class, 'main-content')]"             # Conte√∫do principal
                ]
                
                confirmacao_encontrada = False
                for indicador in indicadores_logado:
                    try:
                        elemento = driver.find_element(By.XPATH, indicador)
                        print(f"‚úÖ Confirma√ß√£o de login encontrada: {indicador}")
                        confirmacao_encontrada = True
                        break
                    except NoSuchElementException:
                        continue
                
                if confirmacao_encontrada:
                    print("üéØ Login confirmado ap√≥s verifica√ß√£o!")
                else:
                    print("‚ö†Ô∏è Login aparentemente bem-sucedido (URL mudou), mas sem confirma√ß√£o visual")
                
                print("üîÑ Navegador permanece aberto para pr√≥ximas a√ß√µes...")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Aviso ao verificar indicadores de login: {e}")
                print("üîÑ Assumindo login bem-sucedido - navegador permanece aberto...")
            
        else:
            # Se chegou aqui, provavelmente o login falhou
            print("‚ùå Login falhou - permanece na p√°gina de login ou erro detectado")
            
            # Procura por mensagens de erro na p√°gina
            try:
                mensagens_erro = [
                    "//*[contains(text(), 'usu√°rio inv√°lido')]",
                    "//*[contains(text(), 'senha incorreta')]",
                    "//*[contains(text(), 'erro')]",
                    "//*[contains(text(), 'falhou')]",
                    "//*[contains(@class, 'error')]",
                    "//*[contains(@class, 'alert-danger')]"
                ]
                
                erro_encontrado = False
                for seletor_erro in mensagens_erro:
                    try:
                        elemento_erro = driver.find_element(By.XPATH, seletor_erro)
                        print(f"üí• Mensagem de erro encontrada: {elemento_erro.text}")
                        erro_encontrado = True
                    except NoSuchElementException:
                        continue
                
                if not erro_encontrado:
                    print("‚ö†Ô∏è Nenhuma mensagem de erro espec√≠fica encontrada")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao verificar mensagens de erro: {e}")
            
            print("üîÑ Encerrando programa devido a falha no login...")
            encerrar_navegador()
            sys.exit(1)
    
    except Exception as e:
        # Captura qualquer erro n√£o previsto e exibe informa√ß√µes detalhadas
        print(f"‚ùå Erro cr√≠tico durante o processo de login: {type(e).__name__}: {e}")
        print("üîÑ Encerrando programa devido a erro cr√≠tico...")
        encerrar_navegador()
        sys.exit(1)


def encerrar_navegador():
    """
    Fun√ß√£o para encerrar o navegador de forma segura
    Deve ser chamada no final do programa ou em caso de erro
    """
    global driver
    
    if driver is not None:
        print("üîí Encerrando navegador...")
        try:
            # Aguarda 3 segundos antes de fechar para permitir visualiza√ß√£o
            time.sleep(3)
            driver.quit()  # Encerra o processo do navegador completamente
            driver = None  # Limpa a vari√°vel global
            print("‚úÖ Navegador encerrado com sucesso!")
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso ao encerrar navegador: {e}")
    else:
        print("‚ö†Ô∏è Navegador j√° estava encerrado ou n√£o foi inicializado")


def obter_driver():
    """
    Fun√ß√£o para obter a inst√¢ncia do driver
    √ötil para usar o driver em outras partes do c√≥digo
    
    Retorna:
    - driver: inst√¢ncia do WebDriver ou None se n√£o inicializado
    """
    global driver
    return driver

def click_RankinUnidades():
    
    print("üåê Acessando a p√°gina de Ranking de Unidades.")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    # Timeout de 15 segundos para opera√ß√µes que precisam de espera
    wait = WebDriverWait(driver, 15)
    
    print("üîç Procurando pelo bot√£o 'Ranking de Unidades'...")
    # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
    botao_RU = None
    seletores_botao = [
        "div[id='Ranking de Unidades']",      # Div com id Ranking de Unidades
        "input[id='Ranking de Unidades']"     # input com id Ranking de Unidades
    ]
    
    # Tenta encontrar o bot√£o usando cada seletor
    for seletor in seletores_botao:
        try:
            if ":contains(" in seletor:
                # Para seletores com :contains, usa XPath que suporta texto
                texto = seletor.split("'")[1]  # Extrai o texto do seletor
                xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}']"
                botao_RU = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            else:
                # Para outros seletores, usa CSS selector normal
                botao_RU = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            print(f"‚úÖ Bot√£o de Ranking de Unidades encontrado com seletor: {seletor}")
            break
        except TimeoutException:
            continue
    
    if botao_RU is None:
        print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o bot√£o de Ranking de Unidades")
        print("üí° Verifique se o formul√°rio de Ranking de Unidades est√° vis√≠vel na p√°gina")
        encerrar_navegador()
        sys.exit(1)
    
    # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
    time.sleep(1)
    
    print("üîê Clicando no bot√£o de Ranking de Unidades...")
    # Clica no bot√£o para submeter o formul√°rio
    botao_RU.click()
    
    # Aguarda alguns segundos para a p√°gina processar
    print("‚è≥ Aguardando resposta do servidor...")
    time.sleep(5)
    
    # Procura por elementos que confirmam que o usu√°rio est√° em RU
    try:
        indicadores_logado = [
            
            "//div[contains(text(), 'Per√≠odo')]",
            "//label[contains(text(), 'Per√≠odo')]",
        ]
        
        confirmacao_encontrada = False
        for indicador in indicadores_logado:
            try:
                elemento = driver.find_element(By.XPATH, indicador)
                print(f"‚úÖ Confirma√ß√£o de que entrou am Ranking de Unidades encontrada: {indicador}")
                confirmacao_encontrada = True
                break
            except NoSuchElementException:
                continue
        
        if confirmacao_encontrada:
            print("üéØ Voc√™ est√° na tela de Ranking de Unidades!")
        else:
            print("‚ö†Ô∏è Entrada em Ranking de Unidades aparentemente bem-sucedido, mas sem confirma√ß√£o visual")
        
    except Exception as e:
                print(f"‚ö†Ô∏è Aviso ao verificar indicadores de Ranking de Unidades: {e}")
                print("üîÑ Assumindo entrada em Ranking de Unidades bem-sucedido - navegador permanece aberto...")
                
    # Verifica a URL atual
    url_atual = driver.current_url
    print(f"üåê URL atual ap√≥s entrar em Ranking de Unidades: {url_atual}")

def click_RU_listarRanking():
    
    print("üåê Dentro de Ranking de Unidades - Procurando por 'Listar'.")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    # Timeout de 15 segundos para opera√ß√µes que precisam de espera
    wait = WebDriverWait(driver, 15)
    
    print("üîç Procurando pelo bot√£o 'Listar'...")
    # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
    botao_Listar = None
    seletores_botao = [
        
        "button:contains('Listar')", 
        "span:contains('Listar')", 
        "button:contains('play_circle_filled')", 
        "span:contains('play_circle_filled')", 
    
    ]
    
    # Tenta encontrar o bot√£o usando cada seletor
    for seletor in seletores_botao:
        try:
            if ":contains(" in seletor:
                # Para seletores com :contains, usa XPath que suporta texto
                texto = seletor.split("'")[1]  # Extrai o texto do seletor
                xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}']"
                botao_Listar = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            else:
                # Para outros seletores, usa CSS selector normal
                botao_Listar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            print(f"‚úÖ Bot√£o de Listar encontrado com seletor: {seletor}")
            break
        except TimeoutException:
            continue
    
    if botao_Listar is None:
        print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o bot√£o de Listar")
        print("üí° Verifique se o formul√°rio de Listar est√° vis√≠vel na p√°gina")
        encerrar_navegador()
        sys.exit(1)
    
    # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
    time.sleep(1)
    
    print("üîê Clicando no bot√£o de Listar...")
    # Clica no bot√£o para submeter o formul√°rio
    botao_Listar.click()
    
    # Aguarda alguns
    print("‚è≥ Aguardando resposta do servidor...")
    time.sleep(5)
    
    # Procura por elementos que confirmam que o usu√°rio est√° em RU
    try:
        indicadores_logado = [
            
            "//div[contains(@class, 'ReactTable -striped -highlight')]",
            "//div[contains(@class, 'rt-table visible')]",
        
        ]
        
        confirmacao_encontrada = False
        for indicador in indicadores_logado:
            try:
                elemento = driver.find_element(By.XPATH, indicador)
                print(f"‚úÖ Confirma√ß√£o de que LISTOU o Ranking: {indicador}")
                confirmacao_encontrada = True
                break
            except NoSuchElementException:
                continue
        
        if confirmacao_encontrada:
            print("üéØ Voc√™ est√° com o Ranking LISTADO!")
        else:
            print("‚ö†Ô∏è LISTA de Ranking aparentemente bem-sucedido, mas sem confirma√ß√£o visual")
        
    except Exception as e:
                print(f"‚ö†Ô∏è Aviso ao verificar indicadores de LISTA: {e}")
                print("üîÑ Assumindo entrada em LISTA bem-sucedido - navegador permanece aberto...")
    
    # Verifica se o login foi bem-sucedido analisando a URL atual
    url_atual = driver.current_url
    print(f"üåê URL atual ap√≥s entrar em Listar: {url_atual}")

# Ser√° alterada para manipular PERIODO
def procura_periodo(priodo_data):
        
    print("üåê Dentro de Ranking de Unidades - Procurando por 'Per√≠odo'.")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    # Timeout de 15 segundos para opera√ß√µes que precisam de espera
    wait = WebDriverWait(driver, 15)
    
    print("üîç Procurando pelo seletor 'Per√≠odo'...")
    # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
    select_rk = None
    seletores_botao = [
        
        "div[id='bc_select_field -toggle']",
        "div[data-value='Vendas']",
        "span:contains('Vendas')",
        # "label[class='md-floating-label md-floating-label--floating md-text--secondary']",
        # "div[class='md-paper md-paper--0 md-fake-btn md-pointer--hover md-fake-btn--no-outline md-select-field md-text']",
        "div[id='bc_select_field -toggle']//div[class='md-icon-separator md-text-field md-text-field--floating-margin md-select-field--text-field']//i:contains('arrow_drop_down')",
        
    ]
    
    # Tenta encontrar o bot√£o usando cada seletor
    for seletor in seletores_botao:
        try:
            if ":contains(" in seletor:
                # Para seletores com :contains, usa XPath que suporta texto
                texto = seletor.split("'")[1]  # Extrai o texto do seletor
                xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}'][1]"
                select_rk = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            else:
                # Para outros seletores, usa CSS selector normal
                select_rk = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            print(f"‚úÖ seletor Per√≠odo encontrado com seletor: {seletor}")
            break
        except TimeoutException:
            continue
    
    if select_rk is None:
        print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o seletor Per√≠odo")
        print("üí° Verifique se o formul√°rio de Per√≠odo est√° vis√≠vel na p√°gina")
        encerrar_navegador()
        sys.exit(1)
    
    # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
    time.sleep(1)
    
    print("üîê Clicando no seletor Per√≠odo...")
    # Clica no bot√£o para submeter o formul√°rio
    select_rk.click()
    
    # Aguarda alguns segundos para a p√°gina processar
    print("‚è≥ Aguardando resposta do servidor para SELECIONAR PERIODO OU DATA...")
    time.sleep(5)
    
    # Ap√≥s achar o seletor de per√≠odo vai procurar e selecionar qual o periodo
    seleciona_periodo(priodo_data)
    
    # Verifica a URL atual
    url_atual = driver.current_url
    print(f"üåê URL atual ap√≥s entrar em Listar: {url_atual}")

def seleciona_periodo(priodo_data):
    
    if priodo_data == 'Data':
        seleciona_data()
    else:
        
        if priodo_data == 'Semana atual':
            periodo_itens = 'CURRENT_WEEK'
        
        elif priodo_data == 'M√™s atual':
            periodo_itens = 'CURRENT_MONTH'
        
        elif priodo_data == 'M√™s anterior':
            periodo_itens = 'LAST_MONTH'
        
        else:
            seleciona_data()
        
        print(f"üåê Dentro de Ranking de Unidades > Seletor de periodo - Procurando por '{priodo_data}'.")
    
        # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
        # Timeout de 15 segundos para opera√ß√µes que precisam de espera
        wait = WebDriverWait(driver, 15)
    
        print(f"üîç Procurando pelo item '{priodo_data}'...")
    
        # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
        select_rk = None
        seletores_botao = [
            
            f"div[data-value={periodo_itens}]",
            f"span:contains({priodo_data})",
            
        ]
        
        # Tenta encontrar o bot√£o usando cada seletor
        for seletor in seletores_botao:
            try:
                if ":contains(" in seletor:
                    # Para seletores com :contains, usa XPath que suporta texto
                    texto = seletor.split("'")[1]  # Extrai o texto do seletor
                    xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}'][1]"
                    select_rk = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
                else:
                    # Para outros seletores, usa CSS selector normal
                    select_rk = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
                print(f"‚úÖ encontrado o item '{priodo_data}' na lista de Periodo com seletor: {seletor}")
                break
            except TimeoutException:
                continue
        
        if select_rk is None:
            print(f"‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o item '{priodo_data}'")
            print(f"üí° Verifique se o formul√°rio de '{priodo_data}' est√° vis√≠vel na p√°gina")
            encerrar_navegador()
            sys.exit(1)
        
        # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
        time.sleep(1)
        
        print(f"üîê Clicando no item '{priodo_data}'...")
        # Clica no bot√£o para submeter o formul√°rio
        select_rk.click()

def seleciona_data():
    
    print(f"üåê Dentro de Ranking de Unidades > Seletor de periodo - Procurando por DATA.")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    # Timeout de 15 segundos para opera√ß√µes que precisam de espera
    wait = WebDriverWait(driver, 15)
    
    print(f"üîç Procurando pelo item DATA...")
    # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
    select_rk = None
    seletores_botao = [
        
        "div[data-value='DATE']",
        "span:contains('DATE')",
        
    ]
    
    # Tenta encontrar o bot√£o usando cada seletor
    for seletor in seletores_botao:
        try:
            if ":contains(" in seletor:
                # Para seletores com :contains, usa XPath que suporta texto
                texto = seletor.split("'")[1]  # Extrai o texto do seletor
                xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}'][1]"
                select_rk = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            else:
                # Para outros seletores, usa CSS selector normal
                select_rk = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            print(f"‚úÖ encontrado o item DATA na lista de Periodo com seletor: {seletor}")
            break
        except TimeoutException:
            continue
    
    if select_rk is None:
        print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o item DATA")
        print("üí° Verifique se o formul√°rio de DATA est√° vis√≠vel na p√°gina")
        encerrar_navegador()
        sys.exit(1)
    
    # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
    time.sleep(1)
    
    print(f"üîê Clicando no item DATA...")
    # Clica no bot√£o para submeter o formul√°rio
    select_rk.click()

# INICIO do trecho
# Fun√ß√µes para selecionar uma data personalizada
def define_data():
    pass

def clica_ano(desejado, atual = date.today().year):
    
    anoAtual = atual
    anoDesejado = desejado
    
    print(f"üåê Dentro de Ranking de Unidades > Seletor de periodo > DATA - Procurando o bot√£o {anoAtual}.")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    # Timeout de 15 segundos para opera√ß√µes que precisam de espera
    wait = WebDriverWait(driver, 15)
    
    print(f"üîç Procurando pelo bot√£o {anoAtual}...")
    # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
    select_rk = None
    seletores_botao = [
        
        "button[aria-expanded='false']",
        f"button:contains('{anoAtual}')",
        f"h6:contains('{anoAtual}')",
        
    ]
    
    # Tenta encontrar o bot√£o usando cada seletor
    for seletor in seletores_botao:
        try:
            if ":contains(" in seletor:
                # Para seletores com :contains, usa XPath que suporta texto
                texto = seletor.split("'")[1]  # Extrai o texto do seletor
                xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}'][1]"
                select_rk = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            else:
                # Para outros seletores, usa CSS selector normal
                select_rk = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            print(f"‚úÖ encontrado o bot√£o {anoAtual} na lista de Periodo com seletor: {seletor}")
            break
        except TimeoutException:
            continue
    
    if select_rk is None:
        print(f"‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o bot√£o {anoAtual}")
        print(f"üí° Verifique se o bot√£o {anoAtual} est√° vis√≠vel na p√°gina")
        encerrar_navegador()
        sys.exit(1)
    
    # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
    time.sleep(1)
    
    print(f"üîê Clicando no bot√£o {anoAtual}...")
    # Clica no bot√£o para submeter o formul√°rio
    select_rk.click()
    
    if anoAtual == anoDesejado:
        clica_semanaDiaMes()
    else:
        print(f"üåê Dentro de Ranking de Unidades > Seletor de periodo > DATA - Procurando o bot√£o {anoDesejado}.")
    
        # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
        # Timeout de 15 segundos para opera√ß√µes que precisam de espera
        wait = WebDriverWait(driver, 15)
        
        print(f"üîç Procurando pelo item bot√£o {anoDesejado}...")
        # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
        select_rk = None
        seletores_botao = [
            
            f"button:contains('{anoDesejado}')",
            f"h6:contains('{anoDesejado}')",
            
        ]
        
        # Tenta encontrar o bot√£o usando cada seletor
        for seletor in seletores_botao:
            try:
                if ":contains(" in seletor:
                    # Para seletores com :contains, usa XPath que suporta texto
                    texto = seletor.split("'")[1]  # Extrai o texto do seletor
                    xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}'][1]"
                    select_rk = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
                else:
                    # Para outros seletores, usa CSS selector normal
                    select_rk = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
                print(f"‚úÖ encontrado o bot√£o {anoDesejado} na lista de Periodo com seletor: {seletor}")
                break
            except TimeoutException:
                continue
        
        if select_rk is None:
            print(f"‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o bot√£o {anoDesejado}")
            print(f"üí° Verifique se o bot√£o {anoDesejado} est√° vis√≠vel na p√°gina")
            encerrar_navegador()
            sys.exit(1)
        
        # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
        time.sleep(1)
        
        print(f"üîê Clicando no bot√£o {anoDesejado}...")
        # Clica no bot√£o para submeter o formul√°rio
        select_rk.click()

def clica_semanaDiaMes():
    pass

def seleciona_m√™s(desejado, atual = date.today().month):
    mesAtual_num = atual
    mesAtual_nome = get_mes(atual)
    mesDesejado_num =  desejado
    mesDesejado_nome =  get_mes(desejado)
    pass

def seleciona_dia(desejado, atual = date.today().day):
    diaAtual_num = atual
    diaAtual_nome = get_mes(atual)
    diaDesejado_num =  desejado
    diaDesejado_nome =  get_mes(desejado)
    pass

global_virhf = 34

def teste():
    global_virhf = 56
    print(global_virhf)

def test2():
    print(global_virhf)
    
def clica_dataInicio():
    
    print(f"üåê Dentro de Ranking de Unidades > Seletor de periodo > DATA - Procurando por input 'De' (data inicial).")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    # Timeout de 15 segundos para opera√ß√µes que precisam de espera
    wait = WebDriverWait(driver, 15)
    
    print(f"üîç Procurando pelo input 'De' (data inicial)...")
    # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
    select_rk = None
    seletores_botao = [
        
        # "label[for='From']", at√© encontrava esse mas dps dava erro
        "input[id='From']",
        "label:contains('De')",
        "div:contains('De')",
        
    ]
    
    # Tenta encontrar o bot√£o usando cada seletor
    for seletor in seletores_botao:
        try:
            if ":contains(" in seletor:
                # Para seletores com :contains, usa XPath que suporta texto
                texto = seletor.split("'")[1]  # Extrai o texto do seletor
                xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}'][1]"
                select_rk = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            else:
                # Para outros seletores, usa CSS selector normal
                select_rk = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            print(f"‚úÖ encontrado o input 'De' na lista de Periodo com seletor: {seletor}")
            break
        except TimeoutException:
            continue
    
    if select_rk is None:
        print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o input 'De' (data inicial)")
        print("üí° Verifique se o formul√°rio do input 'De' (data inicial) est√° vis√≠vel na p√°gina")
        encerrar_navegador()
        sys.exit(1)
    
    # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
    time.sleep(1)
    
    print(f"üîê Clicando no input 'De' (data inicial)...")
    # Clica no bot√£o para submeter o formul√°rio
    select_rk.click()

def clica_dataFim():
    
    print(f"üåê Dentro de Ranking de Unidades > Seletor de periodo > DATA - Procurando por input 'At√©' (data final).")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    # Timeout de 15 segundos para opera√ß√µes que precisam de espera
    wait = WebDriverWait(driver, 15)
    
    print(f"üîç Procurando pelo input 'At√©' (data final)...")
    # Procura pelo bot√£o usando v√°rios seletores poss√≠veis
    select_rk = None
    seletores_botao = [
        
        # "label[for='From']", at√© encontrava esse mas dps dava erro
        "input[id='To']",
        "label:contains('At√©')",
        "div:contains('At√©')",
        
    ]
    
    # Tenta encontrar o bot√£o usando cada seletor
    for seletor in seletores_botao:
        try:
            if ":contains(" in seletor:
                # Para seletores com :contains, usa XPath que suporta texto
                texto = seletor.split("'")[1]  # Extrai o texto do seletor
                xpath = f"//button[contains(text(), '{texto}')] | //input[@value='{texto}'][1]"
                select_rk = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            else:
                # Para outros seletores, usa CSS selector normal
                select_rk = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            print(f"‚úÖ encontrado o input 'At√©' na lista de Periodo com seletor: {seletor}")
            break
        except TimeoutException:
            continue
    
    if select_rk is None:
        print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel encontrar o input 'At√©' (data final)")
        print("üí° Verifique se o formul√°rio do input 'At√©' (data final) est√° vis√≠vel na p√°gina")
        encerrar_navegador()
        sys.exit(1)
    
    # Aguarda um pouco antes de clicar para garantir que a p√°gina est√° pronta
    time.sleep(1)
    
    print(f"üîê Clicando no input 'At√©' (data final)...")
    # Clica no bot√£o para submeter o formul√°rio
    select_rk.click()


def get_mes(numero_mes):
    meses = ["janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
            "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]

    if 1 <= numero_mes <= 12:
        # O n√∫mero do m√™s (1 a 12) √© usado como √≠ndice (0 a 11)
        # Retorna o nomes do m√™s
        return meses[numero_mes - 1]
    else:
        return "N√∫mero do m√™s inv√°lido"

#  FIM do trecho

def click_download():
    """
    Fun√ß√£o corrigida para clicar no bot√£o de download
    Baseada na an√°lise do HTML real fornecido
    """
    global driver
    
    print("üåê Dentro de Ranking de Unidades - Procurando por 'DOWNLOAD'.")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    wait = WebDriverWait(driver, 15)
    
    print("üîç Procurando pelo bot√£o 'DOWNLOAD'...")
    
    botao_DOWNLOAD = None
    
    # Seletores baseados na estrutura HTML REAL fornecida
    # Os 7 primeiros foram comentados pos n√£o funcionam ent√£o s√≥ pederia tempo usando eles. Melhor ir direto no que funciona primeiro.
    '''
    LEMBRAR DE MELHORAR AS OUTRAS FUN√á√ïES COM BASE NESSA POR CONTA DOS SELETORES.
    '''
    seletores_botao = [
        # # 1. Seletor completo baseado nas classes reais do bot√£o
        # "button.MuiButtonBase-root.MuiButton-root.MuiButton-outlined.MuiButton-outlinedPrimary.MuiButton-sizeMedium.MuiButton-outlinedSizeMedium.MuiButton-colorPrimary.MuiButton-disableElevation",
        
        # # 2. Seletor mais espec√≠fico incluindo a classe CSS personalizada
        # "button.css-1r9ztn7",
        
        # # 3. Seletor combinando classes principais do Material UI
        # "button.MuiButton-root.MuiButton-outlined.MuiButton-outlinedPrimary",
        
        # # 4. Seletor pelo span interno com o √≠cone de download
        # "span.material-symbols-outlined.MuiIcon-root[aria-hidden='true']",
        
        # # 5. XPath para encontrar bot√£o que cont√©m span com texto "download"
        # "//button[.//span[contains(@class, 'material-symbols-outlined') and text()='download']]",
        
        # # 6. XPath mais espec√≠fico baseado na estrutura completa
        # "//div[@class='flex itens-center']//button[contains(@class, 'MuiButton-outlined')]",
        
        # # 7. Seletor pelo elemento pai (div com position absolute)
        # "div[style*='position: absolute'] button.MuiButton-root",
        
        # 8. XPath para buscar o span com texto "download" e pegar o bot√£o pai
        "//span[text()='download' and contains(@class, 'material-symbols-outlined')]/parent::button",
        
        # 9. Seletor por atributos espec√≠ficos do bot√£o
        "button[type='button'][tabindex='0'].MuiButton-outlined",
        
        # 10. Seletor pela combina√ß√£o de classes √∫nicas
        "button.force-display.css-1r9ztn7"
    ]
    
    # Estrat√©gia 1: Tentar seletores CSS e XPath espec√≠ficos
    for i, seletor in enumerate(seletores_botao, 1):
        print("üîç Estrat√©gia 1: - Seletor CSS Espec√≠fico")
        print(f"üîç Tentando seletor {i}: {seletor}")
        try:
            if seletor.startswith("//"):
                # XPath
                botao_DOWNLOAD = wait.until(EC.element_to_be_clickable((By.XPATH, seletor)))
            else:
                # CSS selector
                botao_DOWNLOAD = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            
            print(f"‚úÖ Bot√£o de DOWNLOAD encontrado com seletor {i}: {seletor}")
            break
            
        except TimeoutException:
            print(f"‚è≥ Seletor {i} n√£o funcionou, tentando pr√≥ximo...")
            continue
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no seletor {i}: {e}")
            continue
    
    # Estrat√©gia 2: Busca pelo span com texto "download" e depois o bot√£o pai
    if botao_DOWNLOAD is None:
        print("üîç Estrat√©gia 2: Buscando pelo span interno e navegando para o bot√£o pai...")
        try:
            # Encontra o span com o √≠cone de download
            span_download = wait.until(EC.presence_of_element_located((
                By.XPATH, "//span[text()='download' and contains(@class, 'material-symbols-outlined')]"
            )))
            
            # Navega para o bot√£o pai
            botao_DOWNLOAD = span_download.find_element(By.XPATH, "./..")
            
            # Verifica se √© realmente um bot√£o
            if botao_DOWNLOAD.tag_name.lower() == 'button':
                print("‚úÖ Bot√£o encontrado navegando do span para o elemento pai!")
            else:
                print("‚ö†Ô∏è Elemento pai n√£o √© um bot√£o, continuando busca...")
                botao_DOWNLOAD = None
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na estrat√©gia 2: {e}")
    
    # Estrat√©gia 3: Busca por posi√ß√£o na p√°gina (canto superior direito)
    if botao_DOWNLOAD is None:
        print("üîç Estrat√©gia 3: Buscando por posi√ß√£o na p√°gina...")
        try:
            # Busca divs com position absolute (onde est√° localizado o bot√£o)
            divs_absolute = driver.find_elements(By.CSS_SELECTOR, "div[style*='position: absolute']")
            
            for div in divs_absolute:
                try:
                    # Verifica se a div cont√©m "gap: 8px" (caracter√≠stica da div pai)
                    if "gap: 8px" in div.get_attribute("style"):
                        botoes_na_div = div.find_elements(By.TAG_NAME, "button")
                        
                        for botao in botoes_na_div:
                            # Verifica se o bot√£o cont√©m o span com "download"
                            spans = botao.find_elements(By.TAG_NAME, "span")
                            for span in spans:
                                if span.text == "download":
                                    botao_DOWNLOAD = botao
                                    print("‚úÖ Bot√£o encontrado por an√°lise de posi√ß√£o!")
                                    break
                            if botao_DOWNLOAD:
                                break
                        if botao_DOWNLOAD:
                            break
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na estrat√©gia 3: {e}")
    
    # Estrat√©gia 4: Busca exaustiva por todos os bot√µes Material UI
    if botao_DOWNLOAD is None:
        print("üîç Estrat√©gia 4: An√°lise exaustiva de todos os bot√µes Material UI...")
        try:
            botoes_mui = driver.find_elements(By.CSS_SELECTOR, "button[class*='MuiButton']")
            print(f"üìä Encontrados {len(botoes_mui)} bot√µes Material UI")
            
            for i, botao in enumerate(botoes_mui):
                try:
                    # Analisa o conte√∫do HTML do bot√£o
                    html_interno = botao.get_attribute("innerHTML")
                    
                    # Verifica se cont√©m o span com "download"
                    if ("download" in html_interno and 
                        "material-symbols-outlined" in html_interno and
                        "MuiIcon-root" in html_interno):
                        
                        botao_DOWNLOAD = botao
                        print(f"‚úÖ Bot√£o encontrado na an√°lise exaustiva! (Bot√£o #{i+1})")
                        print(f"üìù Classes: {botao.get_attribute('class')}")
                        break
                        
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na estrat√©gia 4: {e}")
    
    # Verifica se encontrou o bot√£o
    if botao_DOWNLOAD is None:
        print("‚ùå ERRO CR√çTICO: N√£o foi poss√≠vel encontrar o bot√£o de DOWNLOAD")
        print("üîß Executando diagn√≥stico avan√ßado...")
        
        # Diagn√≥stico avan√ßado
        try:
            print("\nüîç DIAGN√ìSTICO AVAN√áADO:")
            
            # 1. Verifica se existem elementos com "download"
            elementos_download = driver.find_elements(By.XPATH, "//*[contains(text(), 'download')]")
            print(f"   ‚Ä¢ Elementos contendo 'download': {len(elementos_download)}")
            
            # 2. Verifica material-symbols-outlined
            material_icons = driver.find_elements(By.CSS_SELECTOR, ".material-symbols-outlined")
            print(f"   ‚Ä¢ √çcones Material UI: {len(material_icons)}")
            
            for i, icon in enumerate(material_icons[:3]):
                print(f"     {i+1}. Texto: '{icon.text}', Parent: {icon.find_element(By.XPATH, '..').tag_name}")
            
            # 3. Verifica divs com position absolute
            divs_abs = driver.find_elements(By.CSS_SELECTOR, "div[style*='position: absolute']")
            print(f"   ‚Ä¢ Divs com position absolute: {len(divs_abs)}")
            
            # 4. Lista todos os bot√µes MUI
            botoes_mui = driver.find_elements(By.CSS_SELECTOR, "button[class*='MuiButton']")
            print(f"   ‚Ä¢ Bot√µes Material UI: {len(botoes_mui)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no diagn√≥stico: {e}")
        
        return False
    
    # Tenta clicar no bot√£o encontrado
    try:
        print("üñ±Ô∏è Preparando para clicar no bot√£o...")
        
        # Informa√ß√µes sobre o bot√£o encontrado
        print(f"üìã Informa√ß√µes do bot√£o:")
        print(f"   ‚Ä¢ Tag: {botao_DOWNLOAD.tag_name}")
        print(f"   ‚Ä¢ Texto: '{botao_DOWNLOAD.text}'")
        print(f"   ‚Ä¢ Classes: {botao_DOWNLOAD.get_attribute('class')}")
        print(f"   ‚Ä¢ Vis√≠vel: {botao_DOWNLOAD.is_displayed()}")
        print(f"   ‚Ä¢ Habilitado: {botao_DOWNLOAD.is_enabled()}")
        
        # Move para o elemento antes de clicar
        driver.execute_script("arguments[0].scrollIntoView(true);", botao_DOWNLOAD)
        time.sleep(1)
        
        # Aguarda o elemento estar pronto para clique
        wait.until(EC.element_to_be_clickable(botao_DOWNLOAD))
        
        # Estrat√©gia de clique aprimorada
        sucesso_clique = False
        
        # M√©todo 1: Clique com ActionChains (mais preciso)
        try:
            print("üîê Tentativa 1: Clique com ActionChains...")
            actions = ActionChains(driver)
            actions.move_to_element(botao_DOWNLOAD).pause(0.5).click().perform()
            sucesso_clique = True
            print("‚úÖ Clique ActionChains executado!")
        except Exception as e:
            print(f"‚ö†Ô∏è ActionChains falhou: {e}")
            
            # M√©todo 2: JavaScript click direto
            try:
                print("üîê Tentativa 2: Clique JavaScript...")
                driver.execute_script("arguments[0].click();", botao_DOWNLOAD)
                sucesso_clique = True
                print("‚úÖ Clique JavaScript executado!")
            except Exception as e2:
                print(f"‚ö†Ô∏è JavaScript falhou: {e2}")
                
                # M√©todo 3: Clique normal do Selenium
                try:
                    print("üîê Tentativa 3: Clique Selenium normal...")
                    botao_DOWNLOAD.click()
                    sucesso_clique = True
                    print("‚úÖ Clique Selenium executado!")
                except Exception as e3:
                    print(f"‚ùå TODOS os m√©todos de clique falharam!")
                    print(f"   ActionChains: {e}")
                    print(f"   JavaScript: {e2}")
                    print(f"   Selenium: {e3}")
                    return False
        
        if not sucesso_clique:
            return False
        
        # Aguarda processamento
        print("‚è≥ Aguardando processamento do download...")
        time.sleep(3)
        
        # Verifica indicadores de sucesso
        return verificar_download_iniciado()
        
    except Exception as e:
        print(f"‚ùå Erro geral ao processar clique: {e}")
        return False

def verificar_download_iniciado():
    """
    Verifica se o download foi iniciado com sucesso
    """
    global driver
    
    print("üîç Verificando se o download foi iniciado...")
    
    try:
        # Lista de indicadores de que o download pode ter iniciado
        indicadores_sucesso = [
            # Mudan√ßa na URL
            lambda: "download" in driver.current_url.lower(),
            
            # Elementos de progresso ou loading
            lambda: len(driver.find_elements(By.CSS_SELECTOR, "*[class*='loading'], *[class*='progress'], .spinner")) > 0,
            
            # Mensagens de download
            lambda: len(driver.find_elements(By.XPATH, "//*[contains(text(), 'download') or contains(text(), 'Download') or contains(text(), 'baixando')]")) > 0,
            
            # Novos elementos apareceram na p√°gina
            lambda: len(driver.find_elements(By.CSS_SELECTOR, "*[style*='display: block']")) > 0,
        ]
        
        sucesso_detectado = False
        
        for i, verificador in enumerate(indicadores_sucesso, 1):
            try:
                if verificador():
                    print(f"‚úÖ Indicador de sucesso {i} detectado!")
                    sucesso_detectado = True
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no verificador {i}: {e}")
        
        if sucesso_detectado:
            print("üéâ Download aparentemente iniciado com sucesso!")
            return True
        else:
            print("‚ö†Ô∏è Nenhum indicador claro de download detectado")
            print("üí° Isso n√£o significa necessariamente que falhou - alguns downloads s√£o silenciosos")
            return True  # Assumimos sucesso se o clique funcionou
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na verifica√ß√£o de download: {e}")
        return True  # Assumimos sucesso se chegou at√© aqui

def debug_pagina_download():
    """
    Fun√ß√£o auxiliar melhorada para fazer debug da p√°gina
    """
    global driver
    
    print("üêõ === DEBUG COMPLETO DA P√ÅGINA ===")
    
    try:
        # Informa√ß√µes b√°sicas
        print(f"üìÑ T√≠tulo: {driver.title}")
        print(f"üåê URL: {driver.current_url}")
        print(f"üìê Resolu√ß√£o: {driver.get_window_size()}")
        
        # An√°lise de elementos de download
        print(f"\nüîç AN√ÅLISE ESPEC√çFICA PARA DOWNLOAD:")
        
        # 1. Busca elementos com "download"
        elementos_download = driver.find_elements(By.XPATH, "//*[contains(text(), 'download')]")
        print(f"   üìä Elementos com texto 'download': {len(elementos_download)}")
        
        for i, elem in enumerate(elementos_download[:3]):
            try:
                print(f"      {i+1}. Tag: {elem.tag_name}, Texto: '{elem.text}', Classes: '{elem.get_attribute('class')}'")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
        
        # 2. Material Icons
        material_icons = driver.find_elements(By.CSS_SELECTOR, ".material-symbols-outlined")
        print(f"\n   üé® Material Icons: {len(material_icons)}")
        
        for i, icon in enumerate(material_icons):
            try:
                parent = icon.find_element(By.XPATH, "..")
                print(f"      {i+1}. Texto: '{icon.text}', Parent: {parent.tag_name}, Parent Classes: '{parent.get_attribute('class')}'")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
        
        # 3. Divs com position absolute
        divs_absolute = driver.find_elements(By.CSS_SELECTOR, "div[style*='position: absolute']")
        print(f"\n   üìç Divs com position absolute: {len(divs_absolute)}")
        
        for i, div in enumerate(divs_absolute):
            try:
                style = div.get_attribute("style")
                botoes_dentro = div.find_elements(By.TAG_NAME, "button")
                print(f"      {i+1}. Style: {style[:100]}..., Bot√µes dentro: {len(botoes_dentro)}")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
        
        # 4. Todos os bot√µes Material UI
        botoes_mui = driver.find_elements(By.CSS_SELECTOR, "button[class*='MuiButton']")
        print(f"\n   üîò Bot√µes Material UI: {len(botoes_mui)}")
        
        for i, botao in enumerate(botoes_mui[:5]):  # Primeiros 5
            try:
                print(f"      {i+1}. Texto: '{botao.text}', Classes: '{botao.get_attribute('class')}'")
                print(f"          HTML interno (100 chars): {botao.get_attribute('innerHTML')[:100]}...")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
                
        print(f"\nüéØ RECOMENDA√á√ÉO:")
        print(f"   Use: click_download() para tentar clicar no bot√£o")
        
    except Exception as e:
        print(f"‚ùå Erro geral no debug: {e}")