from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains
import time
import sys

def click_download():
    """
    FUN√á√ÉO: CLIQUE AUTOMATIZADO NO BOT√ÉO DE DOWNLOAD
    ====================================================
    
    DESCRI√á√ÉO GERAL:
    Esta fun√ß√£o implementa um sistema robusto e multicamadas para localizar e clicar 
    automaticamente no bot√£o de download em p√°ginas web que utilizam Material UI (MUI).
    Foi desenvolvida especificamente para sistemas web modernos que implementam componentes
    React com classes CSS din√¢micas e estruturas HTML complexas.
    
    ARQUITETURA DA FUN√á√ÉO:
    A fun√ß√£o utiliza uma abordagem em cascata com 4 estrat√©gias principais de localiza√ß√£o:
    
    1. ESTRAT√âGIA PRIM√ÅRIA - Seletores CSS/XPath Espec√≠ficos:
       - Utiliza 10 seletores diferentes baseados na an√°lise do HTML real
       - Prioriza seletores mais espec√≠ficos para maior precis√£o
       - Cada seletor foi criado com base em padr√µes identificados no DOM da aplica√ß√£o
       - Usa WebDriverWait com timeout de 15 segundos para cada tentativa
       - Implementa fallback autom√°tico se um seletor falhar
    
    2. ESTRAT√âGIA SECUND√ÅRIA - Navega√ß√£o por Elementos Filhos:
       - Localiza primeiro o elemento <span> interno que cont√©m o texto "download"
       - Navega para o elemento pai usando XPath "./.."
       - Verifica se o elemento pai √© realmente um bot√£o
       - √ötil quando as classes do bot√£o mudam mas a estrutura interna permanece
    
    3. ESTRAT√âGIA TERCI√ÅRIA - An√°lise por Posi√ß√£o/Layout:
       - Busca elementos <div> com estilo "position: absolute"
       - Filtra divs que cont√™m "gap: 8px" (caracter√≠stica espec√≠fica do layout)
       - Analisa todos os bot√µes dentro dessas divs
       - Verifica se algum bot√£o cont√©m span com texto "download"
       - Estrat√©gia eficaz para elementos com posicionamento absoluto
    
    4. ESTRAT√âGIA QUATERN√ÅRIA - Busca Exaustiva:
       - Analisa todos os bot√µes Material UI da p√°gina (classe "MuiButton")
       - Examina o innerHTML de cada bot√£o procurando padr√µes espec√≠ficos
       - Procura simultaneamente por: "download", "material-symbols-outlined", "MuiIcon-root"
       - Estrat√©gia de √∫ltimo recurso com an√°lise completa do DOM
    
    SISTEMA DE CLIQUE INTELIGENTE:
    A fun√ß√£o implementa 3 m√©todos diferentes de clique com fallback autom√°tico:
    
    1. ActionChains (M√©todo Preferido):
       - Simula movimento natural do mouse at√© o elemento
       - Adiciona pausa de 0.5 segundos antes do clique
       - Mais pr√≥ximo da intera√ß√£o humana real
       - Maior compatibilidade com elementos complexos
    
    2. JavaScript Click (Fallback 1):
       - Executa clique diretamente via JavaScript no navegador
       - Bypassa limita√ß√µes de elementos sobrepostos ou ocultos
       - √ötil quando ActionChains falha por quest√µes de layout
    
    3. Selenium Click Padr√£o (Fallback 2):
       - M√©todo nativo do Selenium WebDriver
       - Usado como √∫ltimo recurso
       - Compatibilidade com elementos mais simples
    
    SISTEMA DE VERIFICA√á√ÉO DE SUCESSO:
    Ap√≥s o clique, a fun√ß√£o verifica m√∫ltiplos indicadores de que o download foi iniciado:
    - Mudan√ßas na URL do navegador
    - Apari√ß√£o de elementos de loading/progress
    - Mensagens relacionadas a download
    - Novos elementos vis√≠veis na p√°gina
    
    TRATAMENTO DE ERROS:
    - Logging detalhado de cada tentativa
    - Captura e relat√≥rio de exce√ß√µes espec√≠ficas
    - Diagn√≥stico autom√°tico quando todas as estrat√©gias falham
    - Relat√≥rio de elementos dispon√≠veis para debug manual
    
    PAR√ÇMETROS:
    - Utiliza vari√°vel global 'driver' (inst√¢ncia do WebDriver)
    - N√£o recebe par√¢metros diretos
    
    RETORNO:
    - True: Download iniciado com sucesso
    - False: Falha na localiza√ß√£o ou clique do bot√£o
    
    DEPEND√äNCIAS T√âCNICAS:
    - Selenium WebDriver configurado e ativo
    - P√°gina web carregada com elementos Material UI
    - Bot√£o de download presente e acess√≠vel no DOM
    
    CASOS DE USO T√çPICOS:
    - Automa√ß√£o de download de relat√≥rios em sistemas corporativos
    - Extra√ß√£o automatizada de dados de dashboards
    - Processamento em lote de downloads de arquivos
    - Integra√ß√£o com pipelines de dados automatizados
    
    LIMITA√á√ïES E CONSIDERA√á√ïES:
    - Requer que o bot√£o esteja vis√≠vel e habilitado
    - Dependente da estrutura HTML espec√≠fica do Material UI
    - Pode necessitar ajustes se a aplica√ß√£o web for atualizada
    - Timeout padr√£o de 15 segundos pode n√£o ser suficiente para p√°ginas lentas
    
    EXEMPLO DE HTML ESPERADO:
    <div style="position: absolute; gap: 8px;">
        <button class="MuiButtonBase-root MuiButton-root MuiButton-outlined...">
            <span class="material-symbols-outlined...">download</span>
        </button>
    </div>
    """
    global driver
    
    print("üåê Dentro de Ranking de Unidades - Procurando por 'DOWNLOAD'.")
    
    # Cria um objeto WebDriverWait para aguardar condi√ß√µes espec√≠ficas
    wait = WebDriverWait(driver, 15)
    
    print("üîç Procurando pelo bot√£o 'DOWNLOAD'...")
    
    botao_DOWNLOAD = None
    
    # Seletores baseados na estrutura HTML REAL fornecida
    seletores_botao = [
        # 1. Seletor completo baseado nas classes reais do bot√£o
        "button.MuiButtonBase-root.MuiButton-root.MuiButton-outlined.MuiButton-outlinedPrimary.MuiButton-sizeMedium.MuiButton-outlinedSizeMedium.MuiButton-colorPrimary.MuiButton-disableElevation",
        
        # 2. Seletor mais espec√≠fico incluindo a classe CSS personalizada
        "button.css-1r9ztn7",
        
        # 3. Seletor combinando classes principais do Material UI
        "button.MuiButton-root.MuiButton-outlined.MuiButton-outlinedPrimary",
        
        # 4. Seletor pelo span interno com o √≠cone de download
        "span.material-symbols-outlined.MuiIcon-root[aria-hidden='true']",
        
        # 5. XPath para encontrar bot√£o que cont√©m span com texto "download"
        "//button[.//span[contains(@class, 'material-symbols-outlined') and text()='download']]",
        
        # 6. XPath mais espec√≠fico baseado na estrutura completa
        "//div[@class='flex itens-center']//button[contains(@class, 'MuiButton-outlined')]",
        
        # 7. Seletor pelo elemento pai (div com position absolute)
        "div[style*='position: absolute'] button.MuiButton-root",
        
        # 8. XPath para buscar o span com texto "download" e pegar o bot√£o pai
        "//span[text()='download' and contains(@class, 'material-symbols-outlined')]/parent::button",
        
        # 9. Seletor por atributos espec√≠ficos do bot√£o
        "button[type='button'][tabindex='0'].MuiButton-outlined",
        
        # 10. Seletor pela combina√ß√£o de classes √∫nicas
        "button.force-display.css-1r9ztn7"
    ]
    
    # Estrat√©gia 1: Tentar seletores CSS e XPath espec√≠ficos
    for i, seletor in enumerate(seletores_botao, 1):
        print(f"üîç Tentando seletor {i}: {seletor}")
        try:
            if seletor.startswith("//"):
                # XPath
                botao_DOWNLOAD = wait.until(EC.element_to_be_clickable((By.XPATH, seletor)))
            else:
                # CSS selector
                botao_DOWNLOAD = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, seletor)))
            
            print(f"‚úÖ Bot√£o de DOWNLOAD encontrado com seletor {i}: {seletor}")
            break
            
        except TimeoutException:
            print(f"‚è≥ Seletor {i} n√£o funcionou, tentando pr√≥ximo...")
            continue
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no seletor {i}: {e}")
            continue
    
    # Estrat√©gia 2: Busca pelo span com texto "download" e depois o bot√£o pai
    if botao_DOWNLOAD is None:
        print("üîç Estrat√©gia 2: Buscando pelo span interno e navegando para o bot√£o pai...")
        try:
            # Encontra o span com o √≠cone de download
            span_download = wait.until(EC.presence_of_element_located((
                By.XPATH, "//span[text()='download' and contains(@class, 'material-symbols-outlined')]"
            )))
            
            # Navega para o bot√£o pai
            botao_DOWNLOAD = span_download.find_element(By.XPATH, "./..")
            
            # Verifica se √© realmente um bot√£o
            if botao_DOWNLOAD.tag_name.lower() == 'button':
                print("‚úÖ Bot√£o encontrado navegando do span para o elemento pai!")
            else:
                print("‚ö†Ô∏è Elemento pai n√£o √© um bot√£o, continuando busca...")
                botao_DOWNLOAD = None
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na estrat√©gia 2: {e}")
    
    # Estrat√©gia 3: Busca por posi√ß√£o na p√°gina (canto superior direito)
    if botao_DOWNLOAD is None:
        print("üîç Estrat√©gia 3: Buscando por posi√ß√£o na p√°gina...")
        try:
            # Busca divs com position absolute (onde est√° localizado o bot√£o)
            divs_absolute = driver.find_elements(By.CSS_SELECTOR, "div[style*='position: absolute']")
            
            for div in divs_absolute:
                try:
                    # Verifica se a div cont√©m "gap: 8px" (caracter√≠stica da div pai)
                    if "gap: 8px" in div.get_attribute("style"):
                        botoes_na_div = div.find_elements(By.TAG_NAME, "button")
                        
                        for botao in botoes_na_div:
                            # Verifica se o bot√£o cont√©m o span com "download"
                            spans = botao.find_elements(By.TAG_NAME, "span")
                            for span in spans:
                                if span.text == "download":
                                    botao_DOWNLOAD = botao
                                    print("‚úÖ Bot√£o encontrado por an√°lise de posi√ß√£o!")
                                    break
                            if botao_DOWNLOAD:
                                break
                        if botao_DOWNLOAD:
                            break
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na estrat√©gia 3: {e}")
    
    # Estrat√©gia 4: Busca exaustiva por todos os bot√µes Material UI
    if botao_DOWNLOAD is None:
        print("üîç Estrat√©gia 4: An√°lise exaustiva de todos os bot√µes Material UI...")
        try:
            botoes_mui = driver.find_elements(By.CSS_SELECTOR, "button[class*='MuiButton']")
            print(f"üìä Encontrados {len(botoes_mui)} bot√µes Material UI")
            
            for i, botao in enumerate(botoes_mui):
                try:
                    # Analisa o conte√∫do HTML do bot√£o
                    html_interno = botao.get_attribute("innerHTML")
                    
                    # Verifica se cont√©m o span com "download"
                    if ("download" in html_interno and 
                        "material-symbols-outlined" in html_interno and
                        "MuiIcon-root" in html_interno):
                        
                        botao_DOWNLOAD = botao
                        print(f"‚úÖ Bot√£o encontrado na an√°lise exaustiva! (Bot√£o #{i+1})")
                        print(f"üìù Classes: {botao.get_attribute('class')}")
                        break
                        
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na estrat√©gia 4: {e}")
    
    # Verifica se encontrou o bot√£o
    if botao_DOWNLOAD is None:
        print("‚ùå ERRO CR√çTICO: N√£o foi poss√≠vel encontrar o bot√£o de DOWNLOAD")
        print("üîß Executando diagn√≥stico avan√ßado...")
        
        # Diagn√≥stico avan√ßado
        try:
            print("\nüîç DIAGN√ìSTICO AVAN√áADO:")
            
            # 1. Verifica se existem elementos com "download"
            elementos_download = driver.find_elements(By.XPATH, "//*[contains(text(), 'download')]")
            print(f"   ‚Ä¢ Elementos contendo 'download': {len(elementos_download)}")
            
            # 2. Verifica material-symbols-outlined
            material_icons = driver.find_elements(By.CSS_SELECTOR, ".material-symbols-outlined")
            print(f"   ‚Ä¢ √çcones Material UI: {len(material_icons)}")
            
            for i, icon in enumerate(material_icons[:3]):
                print(f"     {i+1}. Texto: '{icon.text}', Parent: {icon.find_element(By.XPATH, '..').tag_name}")
            
            # 3. Verifica divs com position absolute
            divs_abs = driver.find_elements(By.CSS_SELECTOR, "div[style*='position: absolute']")
            print(f"   ‚Ä¢ Divs com position absolute: {len(divs_abs)}")
            
            # 4. Lista todos os bot√µes MUI
            botoes_mui = driver.find_elements(By.CSS_SELECTOR, "button[class*='MuiButton']")
            print(f"   ‚Ä¢ Bot√µes Material UI: {len(botoes_mui)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no diagn√≥stico: {e}")
        
        return False
    
    # Tenta clicar no bot√£o encontrado
    try:
        print("üñ±Ô∏è Preparando para clicar no bot√£o...")
        
        # Informa√ß√µes sobre o bot√£o encontrado
        print(f"üìã Informa√ß√µes do bot√£o:")
        print(f"   ‚Ä¢ Tag: {botao_DOWNLOAD.tag_name}")
        print(f"   ‚Ä¢ Texto: '{botao_DOWNLOAD.text}'")
        print(f"   ‚Ä¢ Classes: {botao_DOWNLOAD.get_attribute('class')}")
        print(f"   ‚Ä¢ Vis√≠vel: {botao_DOWNLOAD.is_displayed()}")
        print(f"   ‚Ä¢ Habilitado: {botao_DOWNLOAD.is_enabled()}")
        
        # Move para o elemento antes de clicar
        driver.execute_script("arguments[0].scrollIntoView(true);", botao_DOWNLOAD)
        time.sleep(1)
        
        # Aguarda o elemento estar pronto para clique
        wait.until(EC.element_to_be_clickable(botao_DOWNLOAD))
        
        # Estrat√©gia de clique aprimorada
        sucesso_clique = False
        
        # M√©todo 1: Clique com ActionChains (mais preciso)
        try:
            print("üîê Tentativa 1: Clique com ActionChains...")
            actions = ActionChains(driver)
            actions.move_to_element(botao_DOWNLOAD).pause(0.5).click().perform()
            sucesso_clique = True
            print("‚úÖ Clique ActionChains executado!")
        except Exception as e:
            print(f"‚ö†Ô∏è ActionChains falhou: {e}")
            
            # M√©todo 2: JavaScript click direto
            try:
                print("üîê Tentativa 2: Clique JavaScript...")
                driver.execute_script("arguments[0].click();", botao_DOWNLOAD)
                sucesso_clique = True
                print("‚úÖ Clique JavaScript executado!")
            except Exception as e2:
                print(f"‚ö†Ô∏è JavaScript falhou: {e2}")
                
                # M√©todo 3: Clique normal do Selenium
                try:
                    print("üîê Tentativa 3: Clique Selenium normal...")
                    botao_DOWNLOAD.click()
                    sucesso_clique = True
                    print("‚úÖ Clique Selenium executado!")
                except Exception as e3:
                    print(f"‚ùå TODOS os m√©todos de clique falharam!")
                    print(f"   ActionChains: {e}")
                    print(f"   JavaScript: {e2}")
                    print(f"   Selenium: {e3}")
                    return False
        
        if not sucesso_clique:
            return False
        
        # Aguarda processamento
        print("‚è≥ Aguardando processamento do download...")
        time.sleep(3)
        
        # Verifica indicadores de sucesso
        return verificar_download_iniciado()
        
    except Exception as e:
        print(f"‚ùå Erro geral ao processar clique: {e}")
        return False

def verificar_download_iniciado():
    """
    FUN√á√ÉO: VERIFICA√á√ÉO DE SUCESSO DO DOWNLOAD
    ==========================================
    
    DESCRI√á√ÉO GERAL:
    Esta fun√ß√£o implementa um sistema inteligente de verifica√ß√£o para determinar se um 
    download foi iniciado com sucesso ap√≥s o clique no bot√£o correspondente. Utiliza 
    m√∫ltiplos indicadores e heur√≠sticas para detectar mudan√ßas na p√°gina web que 
    sugerem o in√≠cio do processo de download.
    
    METODOLOGIA DE VERIFICA√á√ÉO:
    A fun√ß√£o emprega uma abordagem multi-indicador que analisa diferentes aspectos 
    da p√°gina web para detectar sinais de que o download foi iniciado:
    
    1. AN√ÅLISE DE URL:
       - Monitora mudan√ßas na URL do navegador
       - Procura pela palavra "download" na URL atual
       - √ötil para sistemas que redirecionam durante o download
       - Detecta URLs tempor√°rias ou endpoints de download
    
    2. DETEC√á√ÉO DE ELEMENTOS DE PROGRESSO:
       - Busca elementos com classes "loading", "progress", "spinner"
       - Identifica indicadores visuais de processamento
       - Monitora componentes de UI que aparecem durante opera√ß√µes ass√≠ncronas
       - √ötil para aplica√ß√µes SPA (Single Page Application)
    
    3. AN√ÅLISE DE MENSAGENS TEXTUAIS:
       - Procura texto contendo "download", "Download", "baixando"
       - Detecta mensagens de status ou notifica√ß√µes
       - Identifica feedback textual para o usu√°rio
       - Suporte para m√∫ltiplos idiomas (portugu√™s/ingl√™s)
    
    4. MONITORAMENTO DE ELEMENTOS DIN√ÇMICOS:
       - Detecta novos elementos que se tornaram vis√≠veis
       - Procura por mudan√ßas no DOM ap√≥s o clique
       - Identifica elementos com "display: block" que apareceram
       - Captura modifica√ß√µes din√¢micas na interface
    
    L√ìGICA DE DECIS√ÉO:
    A fun√ß√£o utiliza uma abordagem de "primeiro indicador positivo":
    - Executa todos os verificadores sequencialmente
    - Para na primeira detec√ß√£o positiva
    - Assume sucesso se qualquer indicador for detectado
    - Retorna True mesmo se alguns verificadores falharem
    
    TRATAMENTO DE DOWNLOADS SILENCIOSOS:
    Reconhece que alguns downloads podem ser "silenciosos":
    - N√£o geram indicadores visuais √≥bvios
    - Iniciam diretamente pelo navegador
    - N√£o modificam a interface da aplica√ß√£o
    - Para estes casos, assume sucesso se o clique foi executado
    
    ROBUSTEZ E TOLER√ÇNCIA A FALHAS:
    - Cada verificador √© executado independentemente
    - Falhas individuais n√£o comprometem outros verificadores
    - Logging detalhado de erros para diagn√≥stico
    - Estrat√©gia defensiva: assume sucesso em caso de d√∫vida
    
    PAR√ÇMETROS:
    - Utiliza vari√°vel global 'driver' (inst√¢ncia do WebDriver)
    - N√£o recebe par√¢metros diretos
    
    RETORNO:
    - True: Download detectado com sucesso OU assumido como bem-sucedido
    - True (padr√£o): Em caso de incerteza, assume sucesso
    
    CASOS DE USO:
    - Valida√ß√£o de downloads autom√°ticos em dashboards
    - Confirma√ß√£o de exporta√ß√£o de relat√≥rios
    - Verifica√ß√£o de downloads de arquivos em lote
    - Monitoramento de opera√ß√µes ass√≠ncronas
    
    LIMITA√á√ïES:
    - Pode gerar falsos positivos em p√°ginas com muitos elementos din√¢micos
    - Dependente da implementa√ß√£o espec√≠fica da aplica√ß√£o web
    - Timeout fixo de verifica√ß√£o pode n√£o ser adequado para todos os cen√°rios
    - N√£o verifica se o arquivo foi realmente baixado no sistema de arquivos
    
    CONSIDERA√á√ïES DE DESEMPENHO:
    - Execu√ß√£o r√°pida dos verificadores (sem timeouts longos)
    - Interrup√ß√£o precoce ao primeiro sucesso
    - M√≠nimo impacto na performance da p√°gina
    - Verifica√ß√µes baseadas em estado atual do DOM
    """
    global driver
    
    print("üîç Verificando se o download foi iniciado...")
    
    try:
        # Lista de indicadores de que o download pode ter iniciado
        indicadores_sucesso = [
            # Mudan√ßa na URL
            lambda: "download" in driver.current_url.lower(),
            
            # Elementos de progresso ou loading
            lambda: len(driver.find_elements(By.CSS_SELECTOR, "*[class*='loading'], *[class*='progress'], .spinner")) > 0,
            
            # Mensagens de download
            lambda: len(driver.find_elements(By.XPATH, "//*[contains(text(), 'download') or contains(text(), 'Download') or contains(text(), 'baixando')]")) > 0,
            
            # Novos elementos apareceram na p√°gina
            lambda: len(driver.find_elements(By.CSS_SELECTOR, "*[style*='display: block']")) > 0,
        ]
        
        sucesso_detectado = False
        
        for i, verificador in enumerate(indicadores_sucesso, 1):
            try:
                if verificador():
                    print(f"‚úÖ Indicador de sucesso {i} detectado!")
                    sucesso_detectado = True
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no verificador {i}: {e}")
        
        if sucesso_detectado:
            print("üéâ Download aparentemente iniciado com sucesso!")
            return True
        else:
            print("‚ö†Ô∏è Nenhum indicador claro de download detectado")
            print("üí° Isso n√£o significa necessariamente que falhou - alguns downloads s√£o silenciosos")
            return True  # Assumimos sucesso se o clique funcionou
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na verifica√ß√£o de download: {e}")
        return True  # Assumimos sucesso se chegou at√© aqui

def debug_pagina_download():
    """
    FUN√á√ÉO: DIAGN√ìSTICO AVAN√áADO E AN√ÅLISE DO DOM
    =============================================
    
    DESCRI√á√ÉO GERAL:
    Esta fun√ß√£o implementa um sistema completo de diagn√≥stico e an√°lise para p√°ginas 
    web que cont√™m bot√µes de download, especificamente projetada para aplica√ß√µes que 
    utilizam Material UI (MUI) e componentes React. Serve como ferramenta essencial 
    para desenvolvimento, debug e manuten√ß√£o de automa√ß√µes Selenium.
    
    FUNCIONALIDADE PRINCIPAL:
    A fun√ß√£o executa uma varredura sistem√°tica e detalhada da p√°gina web atual, 
    coletando informa√ß√µes cr√≠ticas sobre elementos relacionados a download e 
    fornecendo insights acion√°veis para resolu√ß√£o de problemas de automa√ß√£o.
    
    M√ìDULOS DE AN√ÅLISE:
    
    1. AN√ÅLISE DE INFORMA√á√ïES B√ÅSICAS:
       - Captura t√≠tulo da p√°gina web
       - Registra URL atual completa
       - Obt√©m resolu√ß√£o da janela do navegador
       - Informa√ß√µes essenciais para contexto e reproducibilidade
    
    2. DETEC√á√ÉO ESPEC√çFICA DE ELEMENTOS DE DOWNLOAD:
       - Busca exaustiva por todos os elementos contendo texto "download"
       - An√°lise de tags HTML, classes CSS e conte√∫do textual
       - Identifica√ß√£o de elementos potencialmente relacionados ao download
       - Relat√≥rio detalhado de cada elemento encontrado
    
    3. CATALOGA√á√ÉO DE MATERIAL ICONS:
       - Invent√°rio completo de todos os √≠cones Material UI na p√°gina
       - An√°lise do texto/conte√∫do de cada √≠cone
       - Identifica√ß√£o dos elementos pais de cada √≠cone
       - Mapeamento da estrutura hier√°rquica dos componentes
       - Essencial para localizar √≠cones de download espec√≠ficos
    
    4. AN√ÅLISE DE LAYOUT E POSICIONAMENTO:
       - Identifica√ß√£o de todos os elementos com "position: absolute"
       - An√°lise detalhada dos estilos CSS de posicionamento
       - Contagem de bot√µes dentro de cada container posicionado
       - Mapeamento da estrutura de layout da p√°gina
       - Cr√≠tico para elementos flutuantes ou sobrepostos
    
    5. INVENT√ÅRIO DE BOT√ïES MATERIAL UI:
       - Cataloga√ß√£o completa de todos os bot√µes MUI na p√°gina
       - An√°lise das classes CSS de cada bot√£o
       - Inspe√ß√£o do HTML interno de cada componente
       - Identifica√ß√£o de padr√µes e estruturas comuns
       - Base para cria√ß√£o de seletores precisos
    
    METODOLOGIA DE COLETA:
    - Utiliza seletores CSS e XPath otimizados
    - Implementa tratamento robusto de exce√ß√µes
    - Coleta informa√ß√µes mesmo de elementos parcialmente carregados
    - Limita sa√≠das para evitar spam de dados
    - Foca nos elementos mais relevantes para debug
    
    SISTEMA DE RELAT√ìRIOS:
    - Output formatado e estruturado para f√°cil leitura
    - Categoriza√ß√£o clara de diferentes tipos de elementos
    - Numera√ß√£o sequencial para refer√™ncia
    - Truncamento inteligente de dados longos
    - C√≥digos de emoji para identifica√ß√£o visual r√°pida
    
    CASOS DE USO PRINCIPAIS:
    
    1. DESENVOLVIMENTO DE AUTOMA√á√ïES:
       - Identificar seletores corretos para elementos
       - Compreender estrutura da p√°gina alvo
       - Validar presen√ßa de elementos esperados
    
    2. DEBUG DE FALHAS:
       - Diagnosticar por que automa√ß√µes falharam
       - Identificar mudan√ßas na estrutura da p√°gina
       - Localizar elementos que mudaram de posi√ß√£o
    
    3. MANUTEN√á√ÉO DE C√ìDIGO:
       - Verificar impacto de atualiza√ß√µes da aplica√ß√£o
       - Identificar seletores quebrados
       - Mapear novos elementos adicionados
    
    4. AN√ÅLISE DE PERFORMANCE:
       - Contar quantidade total de elementos
       - Identificar complexidade da p√°gina
       - Mapear hierarquia de componentes
    
    TRATAMENTO DE ERROS:
    - Captura individual de exce√ß√µes por se√ß√£o
    - Continua√ß√£o da an√°lise mesmo com falhas parciais
    - Relat√≥rio de erros com contexto espec√≠fico
    - Graceful degradation quando dados n√£o est√£o dispon√≠veis
    
    OTIMIZA√á√ïES IMPLEMENTADAS:
    - Limita√ß√£o de resultados para evitar sobrecarga
    - Truncamento de strings longas
    - Coleta seletiva de atributos mais relevantes
    - Processamento eficiente mesmo em p√°ginas complexas
    
    SA√çDA ESTRUTURADA:
    A fun√ß√£o gera um relat√≥rio organizado em se√ß√µes:
    - Header com informa√ß√µes b√°sicas
    - Se√ß√£o de elementos com texto "download"  
    - Invent√°rio de Material Icons
    - An√°lise de divs posicionadas absolutamente
    - Cat√°logo de bot√µes Material UI
    - Recomenda√ß√µes de pr√≥ximos passos
    
    INTEGRA√á√ÉO COM OUTRAS FUN√á√ïES:
    - Fornece dados essenciais para click_download()
    - Valida premissas da fun√ß√£o de verifica√ß√£o
    - Suporte ao desenvolvimento de novos seletores
    - Base para estrat√©gias de fallback
    
    PAR√ÇMETROS:
    - Utiliza vari√°vel global 'driver' (inst√¢ncia do WebDriver)
    - N√£o recebe par√¢metros diretos
    - Opera no contexto da p√°gina atual
    
    RETORNO:
    - N√£o retorna valores (fun√ß√£o de diagn√≥stico)
    - Gera output detalhado via print statements
    - Produz relat√≥rio completo da an√°lise da p√°gina
    
    CONSIDERA√á√ïES DE PERFORMANCE:
    - Fun√ß√£o relativamente pesada (uso apenas para debug)
    - N√£o recomendada para uso em produ√ß√£o cont√≠nua
    - Projetada para execu√ß√£o manual ou espor√°dica
    - Tempo de execu√ß√£o varia com complexidade da p√°gina
    
    REQUISITOS T√âCNICOS:
    - WebDriver ativo e p√°gina carregada
    - Acesso ao DOM da p√°gina
    - Permiss√µes de leitura de elementos e atributos
    - Compatibilidade com aplica√ß√µes Material UI/React
    """
    global driver
    
    print("üêõ === DEBUG COMPLETO DA P√ÅGINA ===")
    
    try:
        # Informa√ß√µes b√°sicas
        print(f"üìÑ T√≠tulo: {driver.title}")
        print(f"üåê URL: {driver.current_url}")
        print(f"üìê Resolu√ß√£o: {driver.get_window_size()}")
        
        # An√°lise de elementos de download
        print(f"\nüîç AN√ÅLISE ESPEC√çFICA PARA DOWNLOAD:")
        
        # 1. Busca elementos com "download"
        elementos_download = driver.find_elements(By.XPATH, "//*[contains(text(), 'download')]")
        print(f"   üìä Elementos com texto 'download': {len(elementos_download)}")
        
        for i, elem in enumerate(elementos_download[:3]):
            try:
                print(f"      {i+1}. Tag: {elem.tag_name}, Texto: '{elem.text}', Classes: '{elem.get_attribute('class')}'")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
        
        # 2. Material Icons
        material_icons = driver.find_elements(By.CSS_SELECTOR, ".material-symbols-outlined")
        print(f"\n   üé® Material Icons: {len(material_icons)}")
        
        for i, icon in enumerate(material_icons):
            try:
                parent = icon.find_element(By.XPATH, "..")
                print(f"      {i+1}. Texto: '{icon.text}', Parent: {parent.tag_name}, Parent Classes: '{parent.get_attribute('class')}'")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
        
        # 3. Divs com position absolute
        divs_absolute = driver.find_elements(By.CSS_SELECTOR, "div[style*='position: absolute']")
        print(f"\n   üìç Divs com position absolute: {len(divs_absolute)}")
        
        for i, div in enumerate(divs_absolute):
            try:
                style = div.get_attribute("style")
                botoes_dentro = div.find_elements(By.TAG_NAME, "button")
                print(f"      {i+1}. Style: {style[:100]}..., Bot√µes dentro: {len(botoes_dentro)}")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
        
        # 4. Todos os bot√µes Material UI
        botoes_mui = driver.find_elements(By.CSS_SELECTOR, "button[class*='MuiButton']")
        print(f"\n   üîò Bot√µes Material UI: {len(botoes_mui)}")
        
        for i, botao in enumerate(botoes_mui[:5]):  # Primeiros 5
            try:
                print(f"      {i+1}. Texto: '{botao.text}', Classes: '{botao.get_attribute('class')}'")
                print(f"          HTML interno (100 chars): {botao.get_attribute('innerHTML')[:100]}...")
            except Exception as e:
                print(f"      {i+1}. Erro: {e}")
                
        print(f"\nüéØ RECOMENDA√á√ÉO:")
        print(f"   Use: click_download() para tentar clicar no bot√£o")
        
    except Exception as e:
        print(f"‚ùå Erro geral no debug: {e}")